{"version":3,"sources":["../src/cli.js"],"names":["options","args","process","argv","slice","_","Error","repository","directory","resolve","console","log","entries","vars","files","forEach","input","readFileSync","file","Object","assign","getVars","output","writeFileSync","UNDEFINED_ERROR","e","match","exec","message","prompt","type","name","promptString","promptBoolean","value","question","response"],"mappings":";;AAEA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;AACA;;;;;;;;AAEA,IAAMA,UAAU,EAAhB;AACA,IAAMC,OAAO,wBAASC,QAAQC,IAAR,CAAaC,KAAb,CAAmB,CAAnB,CAAT,EAAgCJ,OAAhC,CAAb;AACA,IAAI,CAACC,KAAKI,CAAL,CAAO,CAAP,CAAL,EAAgB,MAAM,IAAIC,KAAJ,CAAU,yBAAV,CAAN;AAChB,IAAI,CAACL,KAAKI,CAAL,CAAO,CAAP,CAAL,EAAgB,MAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;AAChB,IAAMC,aAAaN,KAAKI,CAAL,CAAO,CAAP,CAAnB;AACA,IAAMG,YAAY,eAAKC,OAAL,CAAaR,KAAKI,CAAL,CAAO,CAAP,CAAb,CAAlB;AACAK,QAAQC,GAAR,QAAiB,6BAAjB;;AAEA,+CACsBJ,UADtB,SACoCC,SADpC,qBAEWA,SAFX;;AAKA,IAAMI,UAAU,oBAAKJ,SAAL,CAAhB;AACA,IAAIK,OAAO,EAAX;AACAD,QAAQE,KAAR,CAAcC,OAAd,CAAsB,gBAAQ;AAC5B,MAAMC,QAAQ,aAAGC,YAAH,CAAgBC,IAAhB,EAAsB,OAAtB,CAAd;AACAC,SAAOC,MAAP,CAAcP,IAAd,EAAoBQ,QAAQL,KAAR,EAAeH,IAAf,CAApB;AACA,MAAMS,SAAS,oBAAKN,KAAL,EAAYH,IAAZ,CAAf;AACA,eAAGU,aAAH,CAAiBL,IAAjB,EAAuBI,MAAvB;AACD,CALD;;AAOA,SAASD,OAAT,CAAkBL,KAAlB,EAAyBH,IAAzB,EAA+B;AAC7B,MAAMW,kBAAkB,qCAAxB;AACAX,SAAOM,OAAOC,MAAP,CAAc,EAAd,EAAkBP,IAAlB,CAAP;;AAEA,SAAO,IAAP,EAAa;AACX,QAAI;AACF,0BAAKG,KAAL,EAAYH,IAAZ;AACA,aAAOA,IAAP;AACD,KAHD,CAGE,OAAOY,CAAP,EAAU;AACV,UAAMC,QAAQF,gBAAgBG,IAAhB,CAAqBF,EAAEG,OAAvB,CAAd;AACA,UAAIF,KAAJ,EAAWP,OAAOC,MAAP,CAAcP,IAAd,EAAoBgB,OAAOH,MAAM,CAAN,CAAP,EAAiBA,MAAM,CAAN,CAAjB,CAApB,EAAX,KACK,MAAMD,CAAN;AACN;AACF;AACF;;AAED,SAASI,MAAT,CAAiBC,IAAjB,EAAuBC,IAAvB,EAA6B;AAC3B,MAAID,SAAS,QAAb,EAAuB,OAAOE,aAAaD,IAAb,CAAP,CAAvB,KACK,OAAOE,cAAcF,IAAd,CAAP;AACN;;AAED,SAASC,YAAT,CAAuBD,IAAvB,EAA6B;AAC3B,MAAMG,QAAQ,uBAAaC,QAAb,CAAyBJ,IAAzB,QAAd;AACA,6BAAUA,IAAV,EAAiBG,KAAjB;AACD;;AAED,SAASD,aAAT,CAAwBF,IAAxB,EAA8B;AAC5B,MAAMK,WAAW,uBAAaD,QAAb,CAAyBJ,IAAzB,cAAjB;AACA,MAAMG,QAAQE,aAAa,GAA3B;AACA,6BAAUL,IAAV,EAAiBG,KAAjB;AACD","file":"cli.js","sourcesContent":["\n\nimport fs from 'fs';\nimport path from 'path';\n\nimport eztl from 'eztl';\nimport minimist from 'minimist';\nimport readlineSync from 'readline-sync';\n\nimport exec from './exec.js';\nimport { getRandomPasta } from './pastas.js';\nimport walk from './walk.js';\n\nconst options = {};\nconst args = minimist(process.argv.slice(2), options);\nif (!args._[0]) throw new Error('Repository is required.');\nif (!args._[1]) throw new Error('Directory is required.');\nconst repository = args._[0];\nconst directory = path.resolve(args._[1]);\nconsole.log(`\\n${getRandomPasta()}\\n`);\n\nexec(`\n  git clone --quiet ${repository} ${directory} && \\\n  rm -rf ${directory}/.git\n`);\n\nconst entries = walk(directory);\nvar vars = {};\nentries.files.forEach(file => {\n  const input = fs.readFileSync(file, 'utf-8');\n  Object.assign(vars, getVars(input, vars));\n  const output = eztl(input, vars);\n  fs.writeFileSync(file, output);\n});\n\nfunction getVars (input, vars) {\n  const UNDEFINED_ERROR = /(.+) variable \"(.+)\" is undefined\\./;\n  vars = Object.assign({}, vars);\n\n  while (true) {\n    try {\n      eztl(input, vars);\n      return vars;\n    } catch (e) {\n      const match = UNDEFINED_ERROR.exec(e.message);\n      if (match) Object.assign(vars, prompt(match[1], match[2]));\n      else throw e;\n    }\n  }\n}\n\nfunction prompt (type, name) {\n  if (type === 'String') return promptString(name);\n  else return promptBoolean(name);\n}\n\nfunction promptString (name) {\n  const value = readlineSync.question(`${name}: `);\n  return { [name]: value };\n}\n\nfunction promptBoolean (name) {\n  const response = readlineSync.question(`${name} (Y/n): `);\n  const value = response !== 'n';\n  return { [name]: value };\n}\n"]}